class Solution {
public:
    const int MOD = 1e9 + 7;
    long long solve(int mask, vector<int>& nums, vector<long long>& dp, unordered_map<int, int> &mp) {
        if (dp[mask] != -1) {
            return -1;
        }
        long long ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (!((1 << i) & mask)) {
                bool flag = true;
                for (int j = 0; j < nums.size(); j++) {
                    if ((1 << j) & mask && __gcd(nums[i], nums[j]) != 1) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    long long subAns = solve(mask | (1 << i), nums, dp, mp);
                    ans = (ans + ((subAns + 1) * mp[nums[i]]) % MOD) % MOD;
                }
            }
        }
        return dp[mask] = ans;
    }
    int squareFreeSubsets(vector<int>& nums) {
        unordered_map<int, int> mp;
        for (int i = 2; i <= 5; i++) {
            for (int j = i * i; j <= 30; j += i * i) {
                mp[j] = 1;
            }
        }
        vector<int> cntNums;
        unordered_map<int, int> freq;
        int cntOne = 0;
        for (int num : nums) {
            if (num == 1) {
                cntOne++;
            } 
            else if (mp[num] != 1) {
                freq[num]++;
                if (freq[num] == 1){
                    cntNums.push_back(num);
                }
            }
        }
        vector<long long> dp(1 << cntNums.size(), -1);
        long long ans = solve(0, cntNums, dp, freq);
        // Handle cntOne
        for (int i = 0; i < cntOne; i++) {
            ans = (ans * 2 + 1) % MOD;
        }
        return ans;
    }
};
