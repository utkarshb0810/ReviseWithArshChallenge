RECURSION--------------------------------------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

class Solution {
public:
    void solve(int idx, vector<int>& nums, vector<int>& res, vector<int>& temp, int prev) {
        if(idx >= nums.size()) {
            if(temp.size() > res.size()) {
                res = temp;
            }
            return;
        }
        if(prev == -1 || nums[idx] % prev == 0) {
            temp.push_back(nums[idx]);
            solve(idx+1, nums, res, temp, nums[idx]);
            temp.pop_back();
        }
        solve(idx+1, nums, res, temp, prev);
    }
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(begin(nums), end(nums));  
        vector<int> res;
        vector<int> temp;
        solve(0, nums, res, temp, -1);
        return res;
    }
};



//TABULATION->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n = nums.size(), lastIdx = 0, maxLen = 1;
        vector<int> dp(n, 1), prev(n, -1);
        for(int i = 0; i < nums.size(); i++) {
            for(int j = 0; j < i; j++) {
                if(nums[i] % nums[j] == 0) {
                    if(dp[i] < dp[j]+1) {
                        dp[i] = dp[j]+1;
                        prev[i] = j;
                    }
                    if(dp[i] > maxLen){
                        maxLen = dp[i];
                        lastIdx = i;
                    }
                }
            }
        }
        vector<int> ans;
        while(lastIdx != -1) {
            ans.push_back(nums[lastIdx]);
            lastIdx = prev[lastIdx];
        }
        return ans;
    }
};
