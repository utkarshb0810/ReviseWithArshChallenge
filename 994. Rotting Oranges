class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int fresh = 0;
        queue<pair<int, int>> q;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 2) {
                    q.push({i, j});
                } else if (grid[i][j] == 1) {
                    fresh++;
                }
            }
        }
        if (fresh == 0) {
            return 0;
        }
        int cnt = 0;
        vector<pair<int, int>> dir = {{0, -1}, {0, 1}, {1, 0}, {-1, 0}};
        while (!q.empty()) {
            int sz = q.size();
            bool rotted = false;
            for (int i = 0; i < sz; i++) {
                int x = q.front().first;
                int y = q.front().second;
                q.pop();
                for (int j = 0; j < dir.size(); j++) {
                    int newX = x + dir[j].first;
                    int newY = y + dir[j].second;
                    if (newX >= 0 && newX < n && newY >= 0 && newY < m && grid[newX][newY] == 1) {
                        grid[newX][newY] = 2; 
                        fresh--;
                        rotted = true;
                        q.push({newX, newY});
                    }
                }
            }
            if (rotted) {
                cnt++;
            }
        }
        return fresh == 0 ? cnt : -1; // If any fresh oranges remain, return -1
    }
};
